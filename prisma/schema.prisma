// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// next-auth

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String              @id @default(cuid())
  name                String?
  email               String?             @unique
  emailVerified       DateTime?
  pronouns            String?
  showPronouns        Boolean             @default(true)
  showSubmissions     Boolean             @default(true)
  displayName         String?
  image               String?
  isAdmin             Boolean             @default(false)
  accounts            Account[]
  sessions            Session[]
  gameSubmissions     GameSubmission[]
  eventAvailabilities EventAvailability[]
  vettingInfo         VettingInfo?
  committees          Event[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VettingInfo {
  id              String    @id @unique @default(cuid())
  userId          String
  twitterAccounts String
  twitchAccounts  String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @updatedAt

  @@unique([userId])
}

// Submissions
model Event {
  id                           String              @id @unique @default(cuid())
  eventName                    String
  gameSubmissionPeriodStart    DateTime
  gameSubmissionPeriodEnd      DateTime
  incentiveSubmissionPeriodEnd DateTime
  eventStart                   DateTime
  eventDays                    Int                 @default(3)
  startTime                    Int                 @default(9)
  endTime                      Int                 @default(23)
  visible                      Boolean             @default(false)
  runStatusVisible             Boolean             @default(false)
  maxSubmissions               Int                 @default(5)
  maxCategories                Int                 @default(5)
  maxIncentives                Int                 @default(5)
  genres                       String[]            @default([])
  firstRunId                   String?
  committeeDiscordChannelId    String?
  gameSubmissions              GameSubmission[]
  eventAvailabilities          EventAvailability[]
  committeeMembers             User[]
  scheduledRuns                ScheduledRun[]      @relation("ScheduledRunEvent")
  firstRun                     ScheduledRun?       @relation(fields: [firstRunId], references: [id], onDelete: SetNull)
  createdAt                    DateTime?           @default(now())
  updatedAt                    DateTime?           @updatedAt
}

model EventAvailability {
  id        String     @id @unique @default(cuid())
  userId    String
  eventId   String
  slots     DateTime[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt

  @@unique([userId, eventId])
}

model GameSubmission {
  id             String                   @id @unique @default(cuid())
  userId         String
  eventId        String
  gameTitle      String
  platform       String
  description    String
  primaryGenre   String                   @default("Other")
  secondaryGenre String?
  technicalNotes String?
  contentWarning String?
  flashingLights Boolean                  @default(false)
  soloCommentary Boolean                  @default(false)

  user           User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories     GameSubmissionCategory[]
  incentives     RunIncentive[]
  event          Event                    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt      DateTime?                @default(now())
  updatedAt      DateTime?                @updatedAt
}

model GameSubmissionCategory {
  id                 String                   @id @unique @default(cuid())
  gameSubmissionId   String
  scheduleSlotId     String?
  categoryName       String
  videoURL           String
  estimate           String
  description        String
  isCommitteeVoteOpened Boolean               @default(false)
  runStatus          RunStatus                @default(Pending)
  gameSubmission     GameSubmission           @relation(fields: [gameSubmissionId], references: [id], onDelete: Cascade)
  attachedIncentives IncentivesOnCategories[]
  scheduleSlot       ScheduledRun?
  createdAt          DateTime?                @default(now())
  updatedAt          DateTime?                @updatedAt
}

enum RunStatus {
  Accepted
  Declined
  Backup
  Bonus
  Pending
  Coop
}

model RunIncentive {
  id                 String                   @id @unique @default(cuid())
  gameSubmissionId   String
  name               String
  videoURL           String
  estimate           String
  closeTime          String
  description        String
  attachedCategories IncentivesOnCategories[]
  gameSubmission     GameSubmission           @relation(fields: [gameSubmissionId], references: [id], onDelete: Cascade)
  createdAt          DateTime?                @default(now())
  updatedAt          DateTime?                @updatedAt
}

model IncentivesOnCategories {
  category    GameSubmissionCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String
  incentive   RunIncentive           @relation(fields: [incentiveId], references: [id], onDelete: Cascade)
  incentiveId String

  @@id([incentiveId, categoryId])
}

model ScheduledRun {
  id               String                  @id @unique @default(cuid())
  eventId          String
  categoryId       String?                 @unique
  nextRunId        String?                 @unique
  event            Event                   @relation("ScheduledRunEvent", fields: [eventId], references: [id], onDelete: Cascade)
  category         GameSubmissionCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  nextRun          ScheduledRun?           @relation("NextRun", fields: [nextRunId], references: [id], onDelete: SetNull)
  previousRun      ScheduledRun?           @relation("NextRun")
  setupTime        String
  isInterstitial   Boolean                 @default(false)
  interstitialName String?
  createdAt        DateTime?               @default(now())
  updatedAt        DateTime?               @updatedAt
  firstEventFor    Event[]                 @ignore // required by prisma
}
